// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package strategy

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/tankpanv/demo/recommend/kitex_gen/base"
	base0 "github.com/tankpanv/demo/recommend/kitex_gen/federation/recommend/base"
	"strings"
)

type Doc struct {
	Keyword *string `thrift:"keyword,1,optional" frugal:"1,optional,string" json:"keyword,omitempty"`
}

func NewDoc() *Doc {
	return &Doc{}
}

func (p *Doc) InitDefault() {
	*p = Doc{}
}

var Doc_Keyword_DEFAULT string

func (p *Doc) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return Doc_Keyword_DEFAULT
	}
	return *p.Keyword
}
func (p *Doc) SetKeyword(val *string) {
	p.Keyword = val
}

var fieldIDToName_Doc = map[int16]string{
	1: "keyword",
}

func (p *Doc) IsSetKeyword() bool {
	return p.Keyword != nil
}

func (p *Doc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Doc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Doc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keyword = &v
	}
	return nil
}

func (p *Doc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Doc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Doc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("keyword", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Doc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Doc(%+v)", *p)
}

func (p *Doc) DeepEqual(ano *Doc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Keyword) {
		return false
	}
	return true
}

func (p *Doc) Field1DeepEqual(src *string) bool {

	if p.Keyword == src {
		return true
	} else if p.Keyword == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Keyword, *src) != 0 {
		return false
	}
	return true
}

type StrategyResponse struct {
	Data  []*Doc      `thrift:"data,1,optional" frugal:"1,optional,list<Doc>" json:"data,omitempty"`
	Extra *base.Extra `thrift:"Extra,255,optional" frugal:"255,optional,base.Extra" json:"Extra,omitempty"`
}

func NewStrategyResponse() *StrategyResponse {
	return &StrategyResponse{}
}

func (p *StrategyResponse) InitDefault() {
	*p = StrategyResponse{}
}

var StrategyResponse_Data_DEFAULT []*Doc

func (p *StrategyResponse) GetData() (v []*Doc) {
	if !p.IsSetData() {
		return StrategyResponse_Data_DEFAULT
	}
	return p.Data
}

var StrategyResponse_Extra_DEFAULT *base.Extra

func (p *StrategyResponse) GetExtra() (v *base.Extra) {
	if !p.IsSetExtra() {
		return StrategyResponse_Extra_DEFAULT
	}
	return p.Extra
}
func (p *StrategyResponse) SetData(val []*Doc) {
	p.Data = val
}
func (p *StrategyResponse) SetExtra(val *base.Extra) {
	p.Extra = val
}

var fieldIDToName_StrategyResponse = map[int16]string{
	1:   "data",
	255: "Extra",
}

func (p *StrategyResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *StrategyResponse) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *StrategyResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StrategyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StrategyResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*Doc, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewDoc()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *StrategyResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Extra = base.NewExtra()
	if err := p.Extra.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StrategyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StrategyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StrategyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return err
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StrategyResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("Extra", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Extra.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *StrategyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StrategyResponse(%+v)", *p)
}

func (p *StrategyResponse) DeepEqual(ano *StrategyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *StrategyResponse) Field1DeepEqual(src []*Doc) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *StrategyResponse) Field255DeepEqual(src *base.Extra) bool {

	if !p.Extra.DeepEqual(src) {
		return false
	}
	return true
}

type StrategyRequest struct {
	Channel    *string           `thrift:"channel,1,optional" frugal:"1,optional,string" json:"channel,omitempty"`
	Version    *int32            `thrift:"version,2,optional" frugal:"2,optional,i32" json:"version,omitempty"`
	PageParams *base0.PageParams `thrift:"page_params,3,optional" frugal:"3,optional,base.PageParams" json:"page_params,omitempty"`
}

func NewStrategyRequest() *StrategyRequest {
	return &StrategyRequest{}
}

func (p *StrategyRequest) InitDefault() {
	*p = StrategyRequest{}
}

var StrategyRequest_Channel_DEFAULT string

func (p *StrategyRequest) GetChannel() (v string) {
	if !p.IsSetChannel() {
		return StrategyRequest_Channel_DEFAULT
	}
	return *p.Channel
}

var StrategyRequest_Version_DEFAULT int32

func (p *StrategyRequest) GetVersion() (v int32) {
	if !p.IsSetVersion() {
		return StrategyRequest_Version_DEFAULT
	}
	return *p.Version
}

var StrategyRequest_PageParams_DEFAULT *base0.PageParams

func (p *StrategyRequest) GetPageParams() (v *base0.PageParams) {
	if !p.IsSetPageParams() {
		return StrategyRequest_PageParams_DEFAULT
	}
	return p.PageParams
}
func (p *StrategyRequest) SetChannel(val *string) {
	p.Channel = val
}
func (p *StrategyRequest) SetVersion(val *int32) {
	p.Version = val
}
func (p *StrategyRequest) SetPageParams(val *base0.PageParams) {
	p.PageParams = val
}

var fieldIDToName_StrategyRequest = map[int16]string{
	1: "channel",
	2: "version",
	3: "page_params",
}

func (p *StrategyRequest) IsSetChannel() bool {
	return p.Channel != nil
}

func (p *StrategyRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *StrategyRequest) IsSetPageParams() bool {
	return p.PageParams != nil
}

func (p *StrategyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StrategyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StrategyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Channel = &v
	}
	return nil
}

func (p *StrategyRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Version = &v
	}
	return nil
}

func (p *StrategyRequest) ReadField3(iprot thrift.TProtocol) error {
	p.PageParams = base0.NewPageParams()
	if err := p.PageParams.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StrategyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StrategyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StrategyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetChannel() {
		if err = oprot.WriteFieldBegin("channel", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Channel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StrategyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *StrategyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageParams() {
		if err = oprot.WriteFieldBegin("page_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PageParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *StrategyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StrategyRequest(%+v)", *p)
}

func (p *StrategyRequest) DeepEqual(ano *StrategyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Channel) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageParams) {
		return false
	}
	return true
}

func (p *StrategyRequest) Field1DeepEqual(src *string) bool {

	if p.Channel == src {
		return true
	} else if p.Channel == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Channel, *src) != 0 {
		return false
	}
	return true
}
func (p *StrategyRequest) Field2DeepEqual(src *int32) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *StrategyRequest) Field3DeepEqual(src *base0.PageParams) bool {

	if !p.PageParams.DeepEqual(src) {
		return false
	}
	return true
}

type StrategyService interface {
	Recommend(ctx context.Context, req *StrategyRequest) (r *StrategyResponse, err error)
}

type StrategyServiceClient struct {
	c thrift.TClient
}

func NewStrategyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StrategyServiceClient {
	return &StrategyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewStrategyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StrategyServiceClient {
	return &StrategyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewStrategyServiceClient(c thrift.TClient) *StrategyServiceClient {
	return &StrategyServiceClient{
		c: c,
	}
}

func (p *StrategyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *StrategyServiceClient) Recommend(ctx context.Context, req *StrategyRequest) (r *StrategyResponse, err error) {
	var _args StrategyServiceRecommendArgs
	_args.Req = req
	var _result StrategyServiceRecommendResult
	if err = p.Client_().Call(ctx, "Recommend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type StrategyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      StrategyService
}

func (p *StrategyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *StrategyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *StrategyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewStrategyServiceProcessor(handler StrategyService) *StrategyServiceProcessor {
	self := &StrategyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Recommend", &strategyServiceProcessorRecommend{handler: handler})
	return self
}
func (p *StrategyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type strategyServiceProcessorRecommend struct {
	handler StrategyService
}

func (p *strategyServiceProcessorRecommend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StrategyServiceRecommendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Recommend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := StrategyServiceRecommendResult{}
	var retval *StrategyResponse
	if retval, err2 = p.handler.Recommend(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Recommend: "+err2.Error())
		oprot.WriteMessageBegin("Recommend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Recommend", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type StrategyServiceRecommendArgs struct {
	Req *StrategyRequest `thrift:"req,1" frugal:"1,default,StrategyRequest" json:"req"`
}

func NewStrategyServiceRecommendArgs() *StrategyServiceRecommendArgs {
	return &StrategyServiceRecommendArgs{}
}

func (p *StrategyServiceRecommendArgs) InitDefault() {
	*p = StrategyServiceRecommendArgs{}
}

var StrategyServiceRecommendArgs_Req_DEFAULT *StrategyRequest

func (p *StrategyServiceRecommendArgs) GetReq() (v *StrategyRequest) {
	if !p.IsSetReq() {
		return StrategyServiceRecommendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StrategyServiceRecommendArgs) SetReq(val *StrategyRequest) {
	p.Req = val
}

var fieldIDToName_StrategyServiceRecommendArgs = map[int16]string{
	1: "req",
}

func (p *StrategyServiceRecommendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StrategyServiceRecommendArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StrategyServiceRecommendArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StrategyServiceRecommendArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewStrategyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StrategyServiceRecommendArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Recommend_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StrategyServiceRecommendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StrategyServiceRecommendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StrategyServiceRecommendArgs(%+v)", *p)
}

func (p *StrategyServiceRecommendArgs) DeepEqual(ano *StrategyServiceRecommendArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *StrategyServiceRecommendArgs) Field1DeepEqual(src *StrategyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type StrategyServiceRecommendResult struct {
	Success *StrategyResponse `thrift:"success,0,optional" frugal:"0,optional,StrategyResponse" json:"success,omitempty"`
}

func NewStrategyServiceRecommendResult() *StrategyServiceRecommendResult {
	return &StrategyServiceRecommendResult{}
}

func (p *StrategyServiceRecommendResult) InitDefault() {
	*p = StrategyServiceRecommendResult{}
}

var StrategyServiceRecommendResult_Success_DEFAULT *StrategyResponse

func (p *StrategyServiceRecommendResult) GetSuccess() (v *StrategyResponse) {
	if !p.IsSetSuccess() {
		return StrategyServiceRecommendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StrategyServiceRecommendResult) SetSuccess(x interface{}) {
	p.Success = x.(*StrategyResponse)
}

var fieldIDToName_StrategyServiceRecommendResult = map[int16]string{
	0: "success",
}

func (p *StrategyServiceRecommendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StrategyServiceRecommendResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StrategyServiceRecommendResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StrategyServiceRecommendResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewStrategyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StrategyServiceRecommendResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Recommend_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StrategyServiceRecommendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *StrategyServiceRecommendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StrategyServiceRecommendResult(%+v)", *p)
}

func (p *StrategyServiceRecommendResult) DeepEqual(ano *StrategyServiceRecommendResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *StrategyServiceRecommendResult) Field0DeepEqual(src *StrategyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
