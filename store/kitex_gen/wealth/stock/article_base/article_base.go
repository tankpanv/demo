// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package article_base

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/tankpanv/demo/store/kitex_gen/wealth/stock/base"
	"strings"
)

type Member struct {
	Avatar *string `thrift:"avatar,1,optional" frugal:"1,optional,string" json:"avatar,omitempty"`
	Name   *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Id     *string `thrift:"id,3,optional" frugal:"3,optional,string" json:"id,omitempty"`
}

func NewMember() *Member {
	return &Member{}
}

func (p *Member) InitDefault() {
	*p = Member{}
}

var Member_Avatar_DEFAULT string

func (p *Member) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return Member_Avatar_DEFAULT
	}
	return *p.Avatar
}

var Member_Name_DEFAULT string

func (p *Member) GetName() (v string) {
	if !p.IsSetName() {
		return Member_Name_DEFAULT
	}
	return *p.Name
}

var Member_Id_DEFAULT string

func (p *Member) GetId() (v string) {
	if !p.IsSetId() {
		return Member_Id_DEFAULT
	}
	return *p.Id
}
func (p *Member) SetAvatar(val *string) {
	p.Avatar = val
}
func (p *Member) SetName(val *string) {
	p.Name = val
}
func (p *Member) SetId(val *string) {
	p.Id = val
}

var fieldIDToName_Member = map[int16]string{
	1: "avatar",
	2: "name",
	3: "id",
}

func (p *Member) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *Member) IsSetName() bool {
	return p.Name != nil
}

func (p *Member) IsSetId() bool {
	return p.Id != nil
}

func (p *Member) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Member[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Member) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *Member) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Member) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *Member) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Member"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Member) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Avatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Member) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Member) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Member) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Member(%+v)", *p)
}

func (p *Member) DeepEqual(ano *Member) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *Member) Field1DeepEqual(src *string) bool {

	if p.Avatar == src {
		return true
	} else if p.Avatar == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Avatar, *src) != 0 {
		return false
	}
	return true
}
func (p *Member) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Member) Field3DeepEqual(src *string) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Id, *src) != 0 {
		return false
	}
	return true
}

type ArticleBase struct {
	Id           *int64   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Content      *string  `thrift:"content,2,optional" frugal:"2,optional,string" json:"content,omitempty"`
	Category     []string `thrift:"category,3,optional" frugal:"3,optional,list<string>" json:"category,omitempty"`
	Tags         []string `thrift:"tags,4,optional" frugal:"4,optional,list<string>" json:"tags,omitempty"`
	Genre        *int32   `thrift:"genre,5,optional" frugal:"5,optional,i32" json:"genre,omitempty"`
	EditorType   *int32   `thrift:"editor_type,6,optional" frugal:"6,optional,i32" json:"editor_type,omitempty"`
	Title        *string  `thrift:"title,7,optional" frugal:"7,optional,string" json:"title,omitempty"`
	AbstractInfo *string  `thrift:"abstract_info,8,optional" frugal:"8,optional,string" json:"abstract_info,omitempty"`
	UserName     *string  `thrift:"user_name,9,optional" frugal:"9,optional,string" json:"user_name,omitempty"`
	Reship       *string  `thrift:"reship,10,optional" frugal:"10,optional,string" json:"reship,omitempty"`
	Logo         *string  `thrift:"logo,11,optional" frugal:"11,optional,string" json:"logo,omitempty"`
	Visibility   *int32   `thrift:"visibility,12,optional" frugal:"12,optional,i32" json:"visibility,omitempty"`
	Keyword      *string  `thrift:"keyword,13,optional" frugal:"13,optional,string" json:"keyword,omitempty"`
}

func NewArticleBase() *ArticleBase {
	return &ArticleBase{}
}

func (p *ArticleBase) InitDefault() {
	*p = ArticleBase{}
}

var ArticleBase_Id_DEFAULT int64

func (p *ArticleBase) GetId() (v int64) {
	if !p.IsSetId() {
		return ArticleBase_Id_DEFAULT
	}
	return *p.Id
}

var ArticleBase_Content_DEFAULT string

func (p *ArticleBase) GetContent() (v string) {
	if !p.IsSetContent() {
		return ArticleBase_Content_DEFAULT
	}
	return *p.Content
}

var ArticleBase_Category_DEFAULT []string

func (p *ArticleBase) GetCategory() (v []string) {
	if !p.IsSetCategory() {
		return ArticleBase_Category_DEFAULT
	}
	return p.Category
}

var ArticleBase_Tags_DEFAULT []string

func (p *ArticleBase) GetTags() (v []string) {
	if !p.IsSetTags() {
		return ArticleBase_Tags_DEFAULT
	}
	return p.Tags
}

var ArticleBase_Genre_DEFAULT int32

func (p *ArticleBase) GetGenre() (v int32) {
	if !p.IsSetGenre() {
		return ArticleBase_Genre_DEFAULT
	}
	return *p.Genre
}

var ArticleBase_EditorType_DEFAULT int32

func (p *ArticleBase) GetEditorType() (v int32) {
	if !p.IsSetEditorType() {
		return ArticleBase_EditorType_DEFAULT
	}
	return *p.EditorType
}

var ArticleBase_Title_DEFAULT string

func (p *ArticleBase) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return ArticleBase_Title_DEFAULT
	}
	return *p.Title
}

var ArticleBase_AbstractInfo_DEFAULT string

func (p *ArticleBase) GetAbstractInfo() (v string) {
	if !p.IsSetAbstractInfo() {
		return ArticleBase_AbstractInfo_DEFAULT
	}
	return *p.AbstractInfo
}

var ArticleBase_UserName_DEFAULT string

func (p *ArticleBase) GetUserName() (v string) {
	if !p.IsSetUserName() {
		return ArticleBase_UserName_DEFAULT
	}
	return *p.UserName
}

var ArticleBase_Reship_DEFAULT string

func (p *ArticleBase) GetReship() (v string) {
	if !p.IsSetReship() {
		return ArticleBase_Reship_DEFAULT
	}
	return *p.Reship
}

var ArticleBase_Logo_DEFAULT string

func (p *ArticleBase) GetLogo() (v string) {
	if !p.IsSetLogo() {
		return ArticleBase_Logo_DEFAULT
	}
	return *p.Logo
}

var ArticleBase_Visibility_DEFAULT int32

func (p *ArticleBase) GetVisibility() (v int32) {
	if !p.IsSetVisibility() {
		return ArticleBase_Visibility_DEFAULT
	}
	return *p.Visibility
}

var ArticleBase_Keyword_DEFAULT string

func (p *ArticleBase) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return ArticleBase_Keyword_DEFAULT
	}
	return *p.Keyword
}
func (p *ArticleBase) SetId(val *int64) {
	p.Id = val
}
func (p *ArticleBase) SetContent(val *string) {
	p.Content = val
}
func (p *ArticleBase) SetCategory(val []string) {
	p.Category = val
}
func (p *ArticleBase) SetTags(val []string) {
	p.Tags = val
}
func (p *ArticleBase) SetGenre(val *int32) {
	p.Genre = val
}
func (p *ArticleBase) SetEditorType(val *int32) {
	p.EditorType = val
}
func (p *ArticleBase) SetTitle(val *string) {
	p.Title = val
}
func (p *ArticleBase) SetAbstractInfo(val *string) {
	p.AbstractInfo = val
}
func (p *ArticleBase) SetUserName(val *string) {
	p.UserName = val
}
func (p *ArticleBase) SetReship(val *string) {
	p.Reship = val
}
func (p *ArticleBase) SetLogo(val *string) {
	p.Logo = val
}
func (p *ArticleBase) SetVisibility(val *int32) {
	p.Visibility = val
}
func (p *ArticleBase) SetKeyword(val *string) {
	p.Keyword = val
}

var fieldIDToName_ArticleBase = map[int16]string{
	1:  "id",
	2:  "content",
	3:  "category",
	4:  "tags",
	5:  "genre",
	6:  "editor_type",
	7:  "title",
	8:  "abstract_info",
	9:  "user_name",
	10: "reship",
	11: "logo",
	12: "visibility",
	13: "keyword",
}

func (p *ArticleBase) IsSetId() bool {
	return p.Id != nil
}

func (p *ArticleBase) IsSetContent() bool {
	return p.Content != nil
}

func (p *ArticleBase) IsSetCategory() bool {
	return p.Category != nil
}

func (p *ArticleBase) IsSetTags() bool {
	return p.Tags != nil
}

func (p *ArticleBase) IsSetGenre() bool {
	return p.Genre != nil
}

func (p *ArticleBase) IsSetEditorType() bool {
	return p.EditorType != nil
}

func (p *ArticleBase) IsSetTitle() bool {
	return p.Title != nil
}

func (p *ArticleBase) IsSetAbstractInfo() bool {
	return p.AbstractInfo != nil
}

func (p *ArticleBase) IsSetUserName() bool {
	return p.UserName != nil
}

func (p *ArticleBase) IsSetReship() bool {
	return p.Reship != nil
}

func (p *ArticleBase) IsSetLogo() bool {
	return p.Logo != nil
}

func (p *ArticleBase) IsSetVisibility() bool {
	return p.Visibility != nil
}

func (p *ArticleBase) IsSetKeyword() bool {
	return p.Keyword != nil
}

func (p *ArticleBase) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleBase[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleBase) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *ArticleBase) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = &v
	}
	return nil
}

func (p *ArticleBase) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Category = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Category = append(p.Category, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ArticleBase) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tags = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Tags = append(p.Tags, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ArticleBase) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Genre = &v
	}
	return nil
}

func (p *ArticleBase) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.EditorType = &v
	}
	return nil
}

func (p *ArticleBase) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = &v
	}
	return nil
}

func (p *ArticleBase) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AbstractInfo = &v
	}
	return nil
}

func (p *ArticleBase) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserName = &v
	}
	return nil
}

func (p *ArticleBase) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Reship = &v
	}
	return nil
}

func (p *ArticleBase) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Logo = &v
	}
	return nil
}

func (p *ArticleBase) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Visibility = &v
	}
	return nil
}

func (p *ArticleBase) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keyword = &v
	}
	return nil
}

func (p *ArticleBase) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleBase"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleBase) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleBase) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleBase) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err = oprot.WriteFieldBegin("category", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Category)); err != nil {
			return err
		}
		for _, v := range p.Category {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ArticleBase) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err = oprot.WriteFieldBegin("tags", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
			return err
		}
		for _, v := range p.Tags {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ArticleBase) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenre() {
		if err = oprot.WriteFieldBegin("genre", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Genre); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ArticleBase) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEditorType() {
		if err = oprot.WriteFieldBegin("editor_type", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EditorType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ArticleBase) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err = oprot.WriteFieldBegin("title", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Title); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ArticleBase) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAbstractInfo() {
		if err = oprot.WriteFieldBegin("abstract_info", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AbstractInfo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ArticleBase) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserName() {
		if err = oprot.WriteFieldBegin("user_name", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ArticleBase) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetReship() {
		if err = oprot.WriteFieldBegin("reship", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Reship); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ArticleBase) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogo() {
		if err = oprot.WriteFieldBegin("logo", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Logo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ArticleBase) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisibility() {
		if err = oprot.WriteFieldBegin("visibility", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Visibility); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ArticleBase) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("keyword", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ArticleBase) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleBase(%+v)", *p)
}

func (p *ArticleBase) DeepEqual(ano *ArticleBase) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.Category) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field5DeepEqual(ano.Genre) {
		return false
	}
	if !p.Field6DeepEqual(ano.EditorType) {
		return false
	}
	if !p.Field7DeepEqual(ano.Title) {
		return false
	}
	if !p.Field8DeepEqual(ano.AbstractInfo) {
		return false
	}
	if !p.Field9DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field10DeepEqual(ano.Reship) {
		return false
	}
	if !p.Field11DeepEqual(ano.Logo) {
		return false
	}
	if !p.Field12DeepEqual(ano.Visibility) {
		return false
	}
	if !p.Field13DeepEqual(ano.Keyword) {
		return false
	}
	return true
}

func (p *ArticleBase) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *ArticleBase) Field2DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleBase) Field3DeepEqual(src []string) bool {

	if len(p.Category) != len(src) {
		return false
	}
	for i, v := range p.Category {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ArticleBase) Field4DeepEqual(src []string) bool {

	if len(p.Tags) != len(src) {
		return false
	}
	for i, v := range p.Tags {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ArticleBase) Field5DeepEqual(src *int32) bool {

	if p.Genre == src {
		return true
	} else if p.Genre == nil || src == nil {
		return false
	}
	if *p.Genre != *src {
		return false
	}
	return true
}
func (p *ArticleBase) Field6DeepEqual(src *int32) bool {

	if p.EditorType == src {
		return true
	} else if p.EditorType == nil || src == nil {
		return false
	}
	if *p.EditorType != *src {
		return false
	}
	return true
}
func (p *ArticleBase) Field7DeepEqual(src *string) bool {

	if p.Title == src {
		return true
	} else if p.Title == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Title, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleBase) Field8DeepEqual(src *string) bool {

	if p.AbstractInfo == src {
		return true
	} else if p.AbstractInfo == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AbstractInfo, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleBase) Field9DeepEqual(src *string) bool {

	if p.UserName == src {
		return true
	} else if p.UserName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserName, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleBase) Field10DeepEqual(src *string) bool {

	if p.Reship == src {
		return true
	} else if p.Reship == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Reship, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleBase) Field11DeepEqual(src *string) bool {

	if p.Logo == src {
		return true
	} else if p.Logo == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Logo, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleBase) Field12DeepEqual(src *int32) bool {

	if p.Visibility == src {
		return true
	} else if p.Visibility == nil || src == nil {
		return false
	}
	if *p.Visibility != *src {
		return false
	}
	return true
}
func (p *ArticleBase) Field13DeepEqual(src *string) bool {

	if p.Keyword == src {
		return true
	} else if p.Keyword == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Keyword, *src) != 0 {
		return false
	}
	return true
}

type ArticleData struct {
	ArticleBase    *ArticleBase `thrift:"article_base,1,optional" frugal:"1,optional,ArticleBase" json:"article_base,omitempty"`
	Author         *string      `thrift:"author,2,optional" frugal:"2,optional,string" json:"author,omitempty"`
	Status         *string      `thrift:"status,3,optional" frugal:"3,optional,string" json:"status,omitempty"`
	IsFiltered     *bool        `thrift:"is_filtered,4,optional" frugal:"4,optional,bool" json:"is_filtered,omitempty"`
	FilterdReasons []string     `thrift:"filterd_reasons,5,optional" frugal:"5,optional,list<string>" json:"filterd_reasons,omitempty"`
	Href           *string      `thrift:"href,6,optional" frugal:"6,optional,string" json:"href,omitempty"`
	Members        []*Member    `thrift:"members,7,optional" frugal:"7,optional,list<Member>" json:"members,omitempty"`
	UpdatedAt      *string      `thrift:"updated_at,8,optional" frugal:"8,optional,string" json:"updated_at,omitempty"`
	CreatedAt      *string      `thrift:"created_at,9,optional" frugal:"9,optional,string" json:"created_at,omitempty"`
	SubDescription *string      `thrift:"sub_description,10,optional" frugal:"10,optional,string" json:"sub_description,omitempty"`
	Description    *string      `thrift:"description,11,optional" frugal:"11,optional,string" json:"description,omitempty"`
	ActiveUser     *int32       `thrift:"active_user,12,optional" frugal:"12,optional,i32" json:"active_user,omitempty"`
	NewUser_       *int32       `thrift:"new_user,13,optional" frugal:"13,optional,i32" json:"new_user,omitempty"`
	Star           *int32       `thrift:"star,14,optional" frugal:"14,optional,i32" json:"star,omitempty"`
	Like           *int32       `thrift:"like,15,optional" frugal:"15,optional,i32" json:"like,omitempty"`
	Message        *int32       `thrift:"message,16,optional" frugal:"16,optional,i32" json:"message,omitempty"`
	Avatar         *string      `thrift:"avatar,17,optional" frugal:"17,optional,string" json:"avatar,omitempty"`
	Cover          *string      `thrift:"cover,18,optional" frugal:"18,optional,string" json:"cover,omitempty"`
	WordNum        *int32       `thrift:"word_num,19,optional" frugal:"19,optional,i32" json:"word_num,omitempty"`
}

func NewArticleData() *ArticleData {
	return &ArticleData{}
}

func (p *ArticleData) InitDefault() {
	*p = ArticleData{}
}

var ArticleData_ArticleBase_DEFAULT *ArticleBase

func (p *ArticleData) GetArticleBase() (v *ArticleBase) {
	if !p.IsSetArticleBase() {
		return ArticleData_ArticleBase_DEFAULT
	}
	return p.ArticleBase
}

var ArticleData_Author_DEFAULT string

func (p *ArticleData) GetAuthor() (v string) {
	if !p.IsSetAuthor() {
		return ArticleData_Author_DEFAULT
	}
	return *p.Author
}

var ArticleData_Status_DEFAULT string

func (p *ArticleData) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return ArticleData_Status_DEFAULT
	}
	return *p.Status
}

var ArticleData_IsFiltered_DEFAULT bool

func (p *ArticleData) GetIsFiltered() (v bool) {
	if !p.IsSetIsFiltered() {
		return ArticleData_IsFiltered_DEFAULT
	}
	return *p.IsFiltered
}

var ArticleData_FilterdReasons_DEFAULT []string

func (p *ArticleData) GetFilterdReasons() (v []string) {
	if !p.IsSetFilterdReasons() {
		return ArticleData_FilterdReasons_DEFAULT
	}
	return p.FilterdReasons
}

var ArticleData_Href_DEFAULT string

func (p *ArticleData) GetHref() (v string) {
	if !p.IsSetHref() {
		return ArticleData_Href_DEFAULT
	}
	return *p.Href
}

var ArticleData_Members_DEFAULT []*Member

func (p *ArticleData) GetMembers() (v []*Member) {
	if !p.IsSetMembers() {
		return ArticleData_Members_DEFAULT
	}
	return p.Members
}

var ArticleData_UpdatedAt_DEFAULT string

func (p *ArticleData) GetUpdatedAt() (v string) {
	if !p.IsSetUpdatedAt() {
		return ArticleData_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var ArticleData_CreatedAt_DEFAULT string

func (p *ArticleData) GetCreatedAt() (v string) {
	if !p.IsSetCreatedAt() {
		return ArticleData_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var ArticleData_SubDescription_DEFAULT string

func (p *ArticleData) GetSubDescription() (v string) {
	if !p.IsSetSubDescription() {
		return ArticleData_SubDescription_DEFAULT
	}
	return *p.SubDescription
}

var ArticleData_Description_DEFAULT string

func (p *ArticleData) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return ArticleData_Description_DEFAULT
	}
	return *p.Description
}

var ArticleData_ActiveUser_DEFAULT int32

func (p *ArticleData) GetActiveUser() (v int32) {
	if !p.IsSetActiveUser() {
		return ArticleData_ActiveUser_DEFAULT
	}
	return *p.ActiveUser
}

var ArticleData_NewUser__DEFAULT int32

func (p *ArticleData) GetNewUser_() (v int32) {
	if !p.IsSetNewUser_() {
		return ArticleData_NewUser__DEFAULT
	}
	return *p.NewUser_
}

var ArticleData_Star_DEFAULT int32

func (p *ArticleData) GetStar() (v int32) {
	if !p.IsSetStar() {
		return ArticleData_Star_DEFAULT
	}
	return *p.Star
}

var ArticleData_Like_DEFAULT int32

func (p *ArticleData) GetLike() (v int32) {
	if !p.IsSetLike() {
		return ArticleData_Like_DEFAULT
	}
	return *p.Like
}

var ArticleData_Message_DEFAULT int32

func (p *ArticleData) GetMessage() (v int32) {
	if !p.IsSetMessage() {
		return ArticleData_Message_DEFAULT
	}
	return *p.Message
}

var ArticleData_Avatar_DEFAULT string

func (p *ArticleData) GetAvatar() (v string) {
	if !p.IsSetAvatar() {
		return ArticleData_Avatar_DEFAULT
	}
	return *p.Avatar
}

var ArticleData_Cover_DEFAULT string

func (p *ArticleData) GetCover() (v string) {
	if !p.IsSetCover() {
		return ArticleData_Cover_DEFAULT
	}
	return *p.Cover
}

var ArticleData_WordNum_DEFAULT int32

func (p *ArticleData) GetWordNum() (v int32) {
	if !p.IsSetWordNum() {
		return ArticleData_WordNum_DEFAULT
	}
	return *p.WordNum
}
func (p *ArticleData) SetArticleBase(val *ArticleBase) {
	p.ArticleBase = val
}
func (p *ArticleData) SetAuthor(val *string) {
	p.Author = val
}
func (p *ArticleData) SetStatus(val *string) {
	p.Status = val
}
func (p *ArticleData) SetIsFiltered(val *bool) {
	p.IsFiltered = val
}
func (p *ArticleData) SetFilterdReasons(val []string) {
	p.FilterdReasons = val
}
func (p *ArticleData) SetHref(val *string) {
	p.Href = val
}
func (p *ArticleData) SetMembers(val []*Member) {
	p.Members = val
}
func (p *ArticleData) SetUpdatedAt(val *string) {
	p.UpdatedAt = val
}
func (p *ArticleData) SetCreatedAt(val *string) {
	p.CreatedAt = val
}
func (p *ArticleData) SetSubDescription(val *string) {
	p.SubDescription = val
}
func (p *ArticleData) SetDescription(val *string) {
	p.Description = val
}
func (p *ArticleData) SetActiveUser(val *int32) {
	p.ActiveUser = val
}
func (p *ArticleData) SetNewUser_(val *int32) {
	p.NewUser_ = val
}
func (p *ArticleData) SetStar(val *int32) {
	p.Star = val
}
func (p *ArticleData) SetLike(val *int32) {
	p.Like = val
}
func (p *ArticleData) SetMessage(val *int32) {
	p.Message = val
}
func (p *ArticleData) SetAvatar(val *string) {
	p.Avatar = val
}
func (p *ArticleData) SetCover(val *string) {
	p.Cover = val
}
func (p *ArticleData) SetWordNum(val *int32) {
	p.WordNum = val
}

var fieldIDToName_ArticleData = map[int16]string{
	1:  "article_base",
	2:  "author",
	3:  "status",
	4:  "is_filtered",
	5:  "filterd_reasons",
	6:  "href",
	7:  "members",
	8:  "updated_at",
	9:  "created_at",
	10: "sub_description",
	11: "description",
	12: "active_user",
	13: "new_user",
	14: "star",
	15: "like",
	16: "message",
	17: "avatar",
	18: "cover",
	19: "word_num",
}

func (p *ArticleData) IsSetArticleBase() bool {
	return p.ArticleBase != nil
}

func (p *ArticleData) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *ArticleData) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ArticleData) IsSetIsFiltered() bool {
	return p.IsFiltered != nil
}

func (p *ArticleData) IsSetFilterdReasons() bool {
	return p.FilterdReasons != nil
}

func (p *ArticleData) IsSetHref() bool {
	return p.Href != nil
}

func (p *ArticleData) IsSetMembers() bool {
	return p.Members != nil
}

func (p *ArticleData) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *ArticleData) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *ArticleData) IsSetSubDescription() bool {
	return p.SubDescription != nil
}

func (p *ArticleData) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ArticleData) IsSetActiveUser() bool {
	return p.ActiveUser != nil
}

func (p *ArticleData) IsSetNewUser_() bool {
	return p.NewUser_ != nil
}

func (p *ArticleData) IsSetStar() bool {
	return p.Star != nil
}

func (p *ArticleData) IsSetLike() bool {
	return p.Like != nil
}

func (p *ArticleData) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ArticleData) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *ArticleData) IsSetCover() bool {
	return p.Cover != nil
}

func (p *ArticleData) IsSetWordNum() bool {
	return p.WordNum != nil
}

func (p *ArticleData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleData) ReadField1(iprot thrift.TProtocol) error {
	p.ArticleBase = NewArticleBase()
	if err := p.ArticleBase.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ArticleData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Author = &v
	}
	return nil
}

func (p *ArticleData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = &v
	}
	return nil
}

func (p *ArticleData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFiltered = &v
	}
	return nil
}

func (p *ArticleData) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.FilterdReasons = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.FilterdReasons = append(p.FilterdReasons, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ArticleData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Href = &v
	}
	return nil
}

func (p *ArticleData) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Members = make([]*Member, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMember()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Members = append(p.Members, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ArticleData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdatedAt = &v
	}
	return nil
}

func (p *ArticleData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = &v
	}
	return nil
}

func (p *ArticleData) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubDescription = &v
	}
	return nil
}

func (p *ArticleData) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *ArticleData) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ActiveUser = &v
	}
	return nil
}

func (p *ArticleData) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NewUser_ = &v
	}
	return nil
}

func (p *ArticleData) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Star = &v
	}
	return nil
}

func (p *ArticleData) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Like = &v
	}
	return nil
}

func (p *ArticleData) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Message = &v
	}
	return nil
}

func (p *ArticleData) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *ArticleData) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Cover = &v
	}
	return nil
}

func (p *ArticleData) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.WordNum = &v
	}
	return nil
}

func (p *ArticleData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetArticleBase() {
		if err = oprot.WriteFieldBegin("article_base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ArticleBase.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthor() {
		if err = oprot.WriteFieldBegin("author", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Author); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ArticleData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsFiltered() {
		if err = oprot.WriteFieldBegin("is_filtered", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsFiltered); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ArticleData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterdReasons() {
		if err = oprot.WriteFieldBegin("filterd_reasons", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.FilterdReasons)); err != nil {
			return err
		}
		for _, v := range p.FilterdReasons {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ArticleData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHref() {
		if err = oprot.WriteFieldBegin("href", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Href); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ArticleData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembers() {
		if err = oprot.WriteFieldBegin("members", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Members)); err != nil {
			return err
		}
		for _, v := range p.Members {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ArticleData) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ArticleData) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ArticleData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubDescription() {
		if err = oprot.WriteFieldBegin("sub_description", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SubDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ArticleData) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ArticleData) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveUser() {
		if err = oprot.WriteFieldBegin("active_user", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ActiveUser); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ArticleData) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewUser_() {
		if err = oprot.WriteFieldBegin("new_user", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NewUser_); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ArticleData) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetStar() {
		if err = oprot.WriteFieldBegin("star", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Star); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ArticleData) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLike() {
		if err = oprot.WriteFieldBegin("like", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Like); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ArticleData) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ArticleData) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Avatar); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ArticleData) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCover() {
		if err = oprot.WriteFieldBegin("cover", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cover); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ArticleData) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetWordNum() {
		if err = oprot.WriteFieldBegin("word_num", thrift.I32, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.WordNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ArticleData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleData(%+v)", *p)
}

func (p *ArticleData) DeepEqual(ano *ArticleData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ArticleBase) {
		return false
	}
	if !p.Field2DeepEqual(ano.Author) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsFiltered) {
		return false
	}
	if !p.Field5DeepEqual(ano.FilterdReasons) {
		return false
	}
	if !p.Field6DeepEqual(ano.Href) {
		return false
	}
	if !p.Field7DeepEqual(ano.Members) {
		return false
	}
	if !p.Field8DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.SubDescription) {
		return false
	}
	if !p.Field11DeepEqual(ano.Description) {
		return false
	}
	if !p.Field12DeepEqual(ano.ActiveUser) {
		return false
	}
	if !p.Field13DeepEqual(ano.NewUser_) {
		return false
	}
	if !p.Field14DeepEqual(ano.Star) {
		return false
	}
	if !p.Field15DeepEqual(ano.Like) {
		return false
	}
	if !p.Field16DeepEqual(ano.Message) {
		return false
	}
	if !p.Field17DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field18DeepEqual(ano.Cover) {
		return false
	}
	if !p.Field19DeepEqual(ano.WordNum) {
		return false
	}
	return true
}

func (p *ArticleData) Field1DeepEqual(src *ArticleBase) bool {

	if !p.ArticleBase.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ArticleData) Field2DeepEqual(src *string) bool {

	if p.Author == src {
		return true
	} else if p.Author == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Author, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field3DeepEqual(src *string) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field4DeepEqual(src *bool) bool {

	if p.IsFiltered == src {
		return true
	} else if p.IsFiltered == nil || src == nil {
		return false
	}
	if *p.IsFiltered != *src {
		return false
	}
	return true
}
func (p *ArticleData) Field5DeepEqual(src []string) bool {

	if len(p.FilterdReasons) != len(src) {
		return false
	}
	for i, v := range p.FilterdReasons {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ArticleData) Field6DeepEqual(src *string) bool {

	if p.Href == src {
		return true
	} else if p.Href == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Href, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field7DeepEqual(src []*Member) bool {

	if len(p.Members) != len(src) {
		return false
	}
	for i, v := range p.Members {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ArticleData) Field8DeepEqual(src *string) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedAt, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field9DeepEqual(src *string) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedAt, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field10DeepEqual(src *string) bool {

	if p.SubDescription == src {
		return true
	} else if p.SubDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SubDescription, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field11DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field12DeepEqual(src *int32) bool {

	if p.ActiveUser == src {
		return true
	} else if p.ActiveUser == nil || src == nil {
		return false
	}
	if *p.ActiveUser != *src {
		return false
	}
	return true
}
func (p *ArticleData) Field13DeepEqual(src *int32) bool {

	if p.NewUser_ == src {
		return true
	} else if p.NewUser_ == nil || src == nil {
		return false
	}
	if *p.NewUser_ != *src {
		return false
	}
	return true
}
func (p *ArticleData) Field14DeepEqual(src *int32) bool {

	if p.Star == src {
		return true
	} else if p.Star == nil || src == nil {
		return false
	}
	if *p.Star != *src {
		return false
	}
	return true
}
func (p *ArticleData) Field15DeepEqual(src *int32) bool {

	if p.Like == src {
		return true
	} else if p.Like == nil || src == nil {
		return false
	}
	if *p.Like != *src {
		return false
	}
	return true
}
func (p *ArticleData) Field16DeepEqual(src *int32) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if *p.Message != *src {
		return false
	}
	return true
}
func (p *ArticleData) Field17DeepEqual(src *string) bool {

	if p.Avatar == src {
		return true
	} else if p.Avatar == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Avatar, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field18DeepEqual(src *string) bool {

	if p.Cover == src {
		return true
	} else if p.Cover == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cover, *src) != 0 {
		return false
	}
	return true
}
func (p *ArticleData) Field19DeepEqual(src *int32) bool {

	if p.WordNum == src {
		return true
	} else if p.WordNum == nil || src == nil {
		return false
	}
	if *p.WordNum != *src {
		return false
	}
	return true
}

type ArticleListResponse struct {
	Data  []*ArticleData `thrift:"data,1,optional" frugal:"1,optional,list<ArticleData>" json:"data,omitempty"`
	Count *int64         `thrift:"count,2,optional" frugal:"2,optional,i64" json:"count,omitempty"`
}

func NewArticleListResponse() *ArticleListResponse {
	return &ArticleListResponse{}
}

func (p *ArticleListResponse) InitDefault() {
	*p = ArticleListResponse{}
}

var ArticleListResponse_Data_DEFAULT []*ArticleData

func (p *ArticleListResponse) GetData() (v []*ArticleData) {
	if !p.IsSetData() {
		return ArticleListResponse_Data_DEFAULT
	}
	return p.Data
}

var ArticleListResponse_Count_DEFAULT int64

func (p *ArticleListResponse) GetCount() (v int64) {
	if !p.IsSetCount() {
		return ArticleListResponse_Count_DEFAULT
	}
	return *p.Count
}
func (p *ArticleListResponse) SetData(val []*ArticleData) {
	p.Data = val
}
func (p *ArticleListResponse) SetCount(val *int64) {
	p.Count = val
}

var fieldIDToName_ArticleListResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ArticleListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ArticleListResponse) IsSetCount() bool {
	return p.Count != nil
}

func (p *ArticleListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArticleListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArticleListResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*ArticleData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewArticleData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ArticleListResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = &v
	}
	return nil
}

func (p *ArticleListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArticleListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArticleListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return err
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArticleListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArticleListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleListResponse(%+v)", *p)
}

func (p *ArticleListResponse) DeepEqual(ano *ArticleListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ArticleListResponse) Field1DeepEqual(src []*ArticleData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ArticleListResponse) Field2DeepEqual(src *int64) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}

type GetOwnArticleReq struct {
	PageParams *base.PageParams `thrift:"page_params,1,optional" frugal:"1,optional,base.PageParams" json:"page_params,omitempty"`
	UserInfos  *base.UserInfos  `thrift:"user_infos,2,optional" frugal:"2,optional,base.UserInfos" json:"user_infos,omitempty"`
}

func NewGetOwnArticleReq() *GetOwnArticleReq {
	return &GetOwnArticleReq{}
}

func (p *GetOwnArticleReq) InitDefault() {
	*p = GetOwnArticleReq{}
}

var GetOwnArticleReq_PageParams_DEFAULT *base.PageParams

func (p *GetOwnArticleReq) GetPageParams() (v *base.PageParams) {
	if !p.IsSetPageParams() {
		return GetOwnArticleReq_PageParams_DEFAULT
	}
	return p.PageParams
}

var GetOwnArticleReq_UserInfos_DEFAULT *base.UserInfos

func (p *GetOwnArticleReq) GetUserInfos() (v *base.UserInfos) {
	if !p.IsSetUserInfos() {
		return GetOwnArticleReq_UserInfos_DEFAULT
	}
	return p.UserInfos
}
func (p *GetOwnArticleReq) SetPageParams(val *base.PageParams) {
	p.PageParams = val
}
func (p *GetOwnArticleReq) SetUserInfos(val *base.UserInfos) {
	p.UserInfos = val
}

var fieldIDToName_GetOwnArticleReq = map[int16]string{
	1: "page_params",
	2: "user_infos",
}

func (p *GetOwnArticleReq) IsSetPageParams() bool {
	return p.PageParams != nil
}

func (p *GetOwnArticleReq) IsSetUserInfos() bool {
	return p.UserInfos != nil
}

func (p *GetOwnArticleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetOwnArticleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetOwnArticleReq) ReadField1(iprot thrift.TProtocol) error {
	p.PageParams = base.NewPageParams()
	if err := p.PageParams.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetOwnArticleReq) ReadField2(iprot thrift.TProtocol) error {
	p.UserInfos = base.NewUserInfos()
	if err := p.UserInfos.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetOwnArticleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOwnArticleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetOwnArticleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageParams() {
		if err = oprot.WriteFieldBegin("page_params", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PageParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetOwnArticleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfos() {
		if err = oprot.WriteFieldBegin("user_infos", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.UserInfos.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetOwnArticleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOwnArticleReq(%+v)", *p)
}

func (p *GetOwnArticleReq) DeepEqual(ano *GetOwnArticleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageParams) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserInfos) {
		return false
	}
	return true
}

func (p *GetOwnArticleReq) Field1DeepEqual(src *base.PageParams) bool {

	if !p.PageParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetOwnArticleReq) Field2DeepEqual(src *base.UserInfos) bool {

	if !p.UserInfos.DeepEqual(src) {
		return false
	}
	return true
}
