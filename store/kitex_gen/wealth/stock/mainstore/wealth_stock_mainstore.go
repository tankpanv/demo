// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package mainstore

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/tankpanv/demo/store/kitex_gen/base"
	base0 "github.com/tankpanv/demo/store/kitex_gen/wealth/stock/base"
	"github.com/tankpanv/demo/store/kitex_gen/wealth/stock/cell_base"
)

type ItemDetailReq struct {
	AppId       *int16        `thrift:"app_id,1,optional" frugal:"1,optional,i16" json:"app_id,omitempty"`
	Source      *base0.Source `thrift:"source,2,optional" frugal:"2,optional,Source" json:"source,omitempty"`
	VersionCode *int16        `thrift:"version_code,3,optional" frugal:"3,optional,i16" json:"version_code,omitempty"`
}

func NewItemDetailReq() *ItemDetailReq {
	return &ItemDetailReq{}
}

func (p *ItemDetailReq) InitDefault() {
	*p = ItemDetailReq{}
}

var ItemDetailReq_AppId_DEFAULT int16

func (p *ItemDetailReq) GetAppId() (v int16) {
	if !p.IsSetAppId() {
		return ItemDetailReq_AppId_DEFAULT
	}
	return *p.AppId
}

var ItemDetailReq_Source_DEFAULT base0.Source

func (p *ItemDetailReq) GetSource() (v base0.Source) {
	if !p.IsSetSource() {
		return ItemDetailReq_Source_DEFAULT
	}
	return *p.Source
}

var ItemDetailReq_VersionCode_DEFAULT int16

func (p *ItemDetailReq) GetVersionCode() (v int16) {
	if !p.IsSetVersionCode() {
		return ItemDetailReq_VersionCode_DEFAULT
	}
	return *p.VersionCode
}
func (p *ItemDetailReq) SetAppId(val *int16) {
	p.AppId = val
}
func (p *ItemDetailReq) SetSource(val *base0.Source) {
	p.Source = val
}
func (p *ItemDetailReq) SetVersionCode(val *int16) {
	p.VersionCode = val
}

var fieldIDToName_ItemDetailReq = map[int16]string{
	1: "app_id",
	2: "source",
	3: "version_code",
}

func (p *ItemDetailReq) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *ItemDetailReq) IsSetSource() bool {
	return p.Source != nil
}

func (p *ItemDetailReq) IsSetVersionCode() bool {
	return p.VersionCode != nil
}

func (p *ItemDetailReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemDetailReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemDetailReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.AppId = &v
	}
	return nil
}

func (p *ItemDetailReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := base0.Source(v)
		p.Source = &tmp
	}
	return nil
}

func (p *ItemDetailReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.VersionCode = &v
	}
	return nil
}

func (p *ItemDetailReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemDetailReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemDetailReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I16, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.AppId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ItemDetailReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Source)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ItemDetailReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionCode() {
		if err = oprot.WriteFieldBegin("version_code", thrift.I16, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.VersionCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ItemDetailReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemDetailReq(%+v)", *p)
}

func (p *ItemDetailReq) DeepEqual(ano *ItemDetailReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Source) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionCode) {
		return false
	}
	return true
}

func (p *ItemDetailReq) Field1DeepEqual(src *int16) bool {

	if p.AppId == src {
		return true
	} else if p.AppId == nil || src == nil {
		return false
	}
	if *p.AppId != *src {
		return false
	}
	return true
}
func (p *ItemDetailReq) Field2DeepEqual(src *base0.Source) bool {

	if p.Source == src {
		return true
	} else if p.Source == nil || src == nil {
		return false
	}
	if *p.Source != *src {
		return false
	}
	return true
}
func (p *ItemDetailReq) Field3DeepEqual(src *int16) bool {

	if p.VersionCode == src {
		return true
	} else if p.VersionCode == nil || src == nil {
		return false
	}
	if *p.VersionCode != *src {
		return false
	}
	return true
}

type ItemDetailResp struct {
	CellView *cell_base.CellView `thrift:"cell_view,1,optional" frugal:"1,optional,cell_base.CellView" json:"cell_view,omitempty"`
}

func NewItemDetailResp() *ItemDetailResp {
	return &ItemDetailResp{}
}

func (p *ItemDetailResp) InitDefault() {
	*p = ItemDetailResp{}
}

var ItemDetailResp_CellView_DEFAULT *cell_base.CellView

func (p *ItemDetailResp) GetCellView() (v *cell_base.CellView) {
	if !p.IsSetCellView() {
		return ItemDetailResp_CellView_DEFAULT
	}
	return p.CellView
}
func (p *ItemDetailResp) SetCellView(val *cell_base.CellView) {
	p.CellView = val
}

var fieldIDToName_ItemDetailResp = map[int16]string{
	1: "cell_view",
}

func (p *ItemDetailResp) IsSetCellView() bool {
	return p.CellView != nil
}

func (p *ItemDetailResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemDetailResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemDetailResp) ReadField1(iprot thrift.TProtocol) error {
	p.CellView = cell_base.NewCellView()
	if err := p.CellView.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ItemDetailResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemDetailResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemDetailResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellView() {
		if err = oprot.WriteFieldBegin("cell_view", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CellView.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ItemDetailResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemDetailResp(%+v)", *p)
}

func (p *ItemDetailResp) DeepEqual(ano *ItemDetailResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CellView) {
		return false
	}
	return true
}

func (p *ItemDetailResp) Field1DeepEqual(src *cell_base.CellView) bool {

	if !p.CellView.DeepEqual(src) {
		return false
	}
	return true
}

type MainPageReq struct {
	AppId       *int16                 `thrift:"app_id,1,optional" frugal:"1,optional,i16" json:"app_id,omitempty"`
	Source      *base0.Source          `thrift:"source,2,optional" frugal:"2,optional,Source" json:"source,omitempty"`
	MainTabType *cell_base.MainTabType `thrift:"main_tab_type,3,optional" frugal:"3,optional,MainTabType" json:"main_tab_type,omitempty"`
	VersionCode *int16                 `thrift:"version_code,4,optional" frugal:"4,optional,i16" json:"version_code,omitempty"`
	NextOffset  *int32                 `thrift:"next_offset,5,optional" frugal:"5,optional,i32" json:"next_offset,omitempty"`
	PageSize    *int32                 `thrift:"page_size,6,optional" frugal:"6,optional,i32" json:"page_size,omitempty"`
}

func NewMainPageReq() *MainPageReq {
	return &MainPageReq{}
}

func (p *MainPageReq) InitDefault() {
	*p = MainPageReq{}
}

var MainPageReq_AppId_DEFAULT int16

func (p *MainPageReq) GetAppId() (v int16) {
	if !p.IsSetAppId() {
		return MainPageReq_AppId_DEFAULT
	}
	return *p.AppId
}

var MainPageReq_Source_DEFAULT base0.Source

func (p *MainPageReq) GetSource() (v base0.Source) {
	if !p.IsSetSource() {
		return MainPageReq_Source_DEFAULT
	}
	return *p.Source
}

var MainPageReq_MainTabType_DEFAULT cell_base.MainTabType

func (p *MainPageReq) GetMainTabType() (v cell_base.MainTabType) {
	if !p.IsSetMainTabType() {
		return MainPageReq_MainTabType_DEFAULT
	}
	return *p.MainTabType
}

var MainPageReq_VersionCode_DEFAULT int16

func (p *MainPageReq) GetVersionCode() (v int16) {
	if !p.IsSetVersionCode() {
		return MainPageReq_VersionCode_DEFAULT
	}
	return *p.VersionCode
}

var MainPageReq_NextOffset_DEFAULT int32

func (p *MainPageReq) GetNextOffset() (v int32) {
	if !p.IsSetNextOffset() {
		return MainPageReq_NextOffset_DEFAULT
	}
	return *p.NextOffset
}

var MainPageReq_PageSize_DEFAULT int32

func (p *MainPageReq) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return MainPageReq_PageSize_DEFAULT
	}
	return *p.PageSize
}
func (p *MainPageReq) SetAppId(val *int16) {
	p.AppId = val
}
func (p *MainPageReq) SetSource(val *base0.Source) {
	p.Source = val
}
func (p *MainPageReq) SetMainTabType(val *cell_base.MainTabType) {
	p.MainTabType = val
}
func (p *MainPageReq) SetVersionCode(val *int16) {
	p.VersionCode = val
}
func (p *MainPageReq) SetNextOffset(val *int32) {
	p.NextOffset = val
}
func (p *MainPageReq) SetPageSize(val *int32) {
	p.PageSize = val
}

var fieldIDToName_MainPageReq = map[int16]string{
	1: "app_id",
	2: "source",
	3: "main_tab_type",
	4: "version_code",
	5: "next_offset",
	6: "page_size",
}

func (p *MainPageReq) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *MainPageReq) IsSetSource() bool {
	return p.Source != nil
}

func (p *MainPageReq) IsSetMainTabType() bool {
	return p.MainTabType != nil
}

func (p *MainPageReq) IsSetVersionCode() bool {
	return p.VersionCode != nil
}

func (p *MainPageReq) IsSetNextOffset() bool {
	return p.NextOffset != nil
}

func (p *MainPageReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *MainPageReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MainPageReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MainPageReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.AppId = &v
	}
	return nil
}

func (p *MainPageReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := base0.Source(v)
		p.Source = &tmp
	}
	return nil
}

func (p *MainPageReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := cell_base.MainTabType(v)
		p.MainTabType = &tmp
	}
	return nil
}

func (p *MainPageReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.VersionCode = &v
	}
	return nil
}

func (p *MainPageReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NextOffset = &v
	}
	return nil
}

func (p *MainPageReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *MainPageReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MainPageReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MainPageReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I16, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.AppId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MainPageReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Source)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MainPageReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMainTabType() {
		if err = oprot.WriteFieldBegin("main_tab_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MainTabType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MainPageReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionCode() {
		if err = oprot.WriteFieldBegin("version_code", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.VersionCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MainPageReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextOffset() {
		if err = oprot.WriteFieldBegin("next_offset", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NextOffset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MainPageReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MainPageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MainPageReq(%+v)", *p)
}

func (p *MainPageReq) DeepEqual(ano *MainPageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AppId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Source) {
		return false
	}
	if !p.Field3DeepEqual(ano.MainTabType) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionCode) {
		return false
	}
	if !p.Field5DeepEqual(ano.NextOffset) {
		return false
	}
	if !p.Field6DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *MainPageReq) Field1DeepEqual(src *int16) bool {

	if p.AppId == src {
		return true
	} else if p.AppId == nil || src == nil {
		return false
	}
	if *p.AppId != *src {
		return false
	}
	return true
}
func (p *MainPageReq) Field2DeepEqual(src *base0.Source) bool {

	if p.Source == src {
		return true
	} else if p.Source == nil || src == nil {
		return false
	}
	if *p.Source != *src {
		return false
	}
	return true
}
func (p *MainPageReq) Field3DeepEqual(src *cell_base.MainTabType) bool {

	if p.MainTabType == src {
		return true
	} else if p.MainTabType == nil || src == nil {
		return false
	}
	if *p.MainTabType != *src {
		return false
	}
	return true
}
func (p *MainPageReq) Field4DeepEqual(src *int16) bool {

	if p.VersionCode == src {
		return true
	} else if p.VersionCode == nil || src == nil {
		return false
	}
	if *p.VersionCode != *src {
		return false
	}
	return true
}
func (p *MainPageReq) Field5DeepEqual(src *int32) bool {

	if p.NextOffset == src {
		return true
	} else if p.NextOffset == nil || src == nil {
		return false
	}
	if *p.NextOffset != *src {
		return false
	}
	return true
}
func (p *MainPageReq) Field6DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}

type TabInfo struct {
	MainTabType *cell_base.MainTabType `thrift:"main_tab_type,1,optional" frugal:"1,optional,MainTabType" json:"main_tab_type,omitempty"`
	CellViews   []*cell_base.CellView  `thrift:"cell_views,2,optional" frugal:"2,optional,list<cell_base.CellView>" json:"cell_views,omitempty"`
	Count       *int32                 `thrift:"count,3,optional" frugal:"3,optional,i32" json:"count,omitempty"`
	NextOffset  *int32                 `thrift:"next_offset,4,optional" frugal:"4,optional,i32" json:"next_offset,omitempty"`
	HasMore     *int32                 `thrift:"has_more,5,optional" frugal:"5,optional,i32" json:"has_more,omitempty"`
}

func NewTabInfo() *TabInfo {
	return &TabInfo{}
}

func (p *TabInfo) InitDefault() {
	*p = TabInfo{}
}

var TabInfo_MainTabType_DEFAULT cell_base.MainTabType

func (p *TabInfo) GetMainTabType() (v cell_base.MainTabType) {
	if !p.IsSetMainTabType() {
		return TabInfo_MainTabType_DEFAULT
	}
	return *p.MainTabType
}

var TabInfo_CellViews_DEFAULT []*cell_base.CellView

func (p *TabInfo) GetCellViews() (v []*cell_base.CellView) {
	if !p.IsSetCellViews() {
		return TabInfo_CellViews_DEFAULT
	}
	return p.CellViews
}

var TabInfo_Count_DEFAULT int32

func (p *TabInfo) GetCount() (v int32) {
	if !p.IsSetCount() {
		return TabInfo_Count_DEFAULT
	}
	return *p.Count
}

var TabInfo_NextOffset_DEFAULT int32

func (p *TabInfo) GetNextOffset() (v int32) {
	if !p.IsSetNextOffset() {
		return TabInfo_NextOffset_DEFAULT
	}
	return *p.NextOffset
}

var TabInfo_HasMore_DEFAULT int32

func (p *TabInfo) GetHasMore() (v int32) {
	if !p.IsSetHasMore() {
		return TabInfo_HasMore_DEFAULT
	}
	return *p.HasMore
}
func (p *TabInfo) SetMainTabType(val *cell_base.MainTabType) {
	p.MainTabType = val
}
func (p *TabInfo) SetCellViews(val []*cell_base.CellView) {
	p.CellViews = val
}
func (p *TabInfo) SetCount(val *int32) {
	p.Count = val
}
func (p *TabInfo) SetNextOffset(val *int32) {
	p.NextOffset = val
}
func (p *TabInfo) SetHasMore(val *int32) {
	p.HasMore = val
}

var fieldIDToName_TabInfo = map[int16]string{
	1: "main_tab_type",
	2: "cell_views",
	3: "count",
	4: "next_offset",
	5: "has_more",
}

func (p *TabInfo) IsSetMainTabType() bool {
	return p.MainTabType != nil
}

func (p *TabInfo) IsSetCellViews() bool {
	return p.CellViews != nil
}

func (p *TabInfo) IsSetCount() bool {
	return p.Count != nil
}

func (p *TabInfo) IsSetNextOffset() bool {
	return p.NextOffset != nil
}

func (p *TabInfo) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *TabInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TabInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TabInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := cell_base.MainTabType(v)
		p.MainTabType = &tmp
	}
	return nil
}

func (p *TabInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CellViews = make([]*cell_base.CellView, 0, size)
	for i := 0; i < size; i++ {
		_elem := cell_base.NewCellView()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CellViews = append(p.CellViews, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TabInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Count = &v
	}
	return nil
}

func (p *TabInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NextOffset = &v
	}
	return nil
}

func (p *TabInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.HasMore = &v
	}
	return nil
}

func (p *TabInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TabInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TabInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMainTabType() {
		if err = oprot.WriteFieldBegin("main_tab_type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MainTabType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TabInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellViews() {
		if err = oprot.WriteFieldBegin("cell_views", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CellViews)); err != nil {
			return err
		}
		for _, v := range p.CellViews {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TabInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err = oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Count); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TabInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextOffset() {
		if err = oprot.WriteFieldBegin("next_offset", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NextOffset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TabInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TabInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TabInfo(%+v)", *p)
}

func (p *TabInfo) DeepEqual(ano *TabInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MainTabType) {
		return false
	}
	if !p.Field2DeepEqual(ano.CellViews) {
		return false
	}
	if !p.Field3DeepEqual(ano.Count) {
		return false
	}
	if !p.Field4DeepEqual(ano.NextOffset) {
		return false
	}
	if !p.Field5DeepEqual(ano.HasMore) {
		return false
	}
	return true
}

func (p *TabInfo) Field1DeepEqual(src *cell_base.MainTabType) bool {

	if p.MainTabType == src {
		return true
	} else if p.MainTabType == nil || src == nil {
		return false
	}
	if *p.MainTabType != *src {
		return false
	}
	return true
}
func (p *TabInfo) Field2DeepEqual(src []*cell_base.CellView) bool {

	if len(p.CellViews) != len(src) {
		return false
	}
	for i, v := range p.CellViews {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TabInfo) Field3DeepEqual(src *int32) bool {

	if p.Count == src {
		return true
	} else if p.Count == nil || src == nil {
		return false
	}
	if *p.Count != *src {
		return false
	}
	return true
}
func (p *TabInfo) Field4DeepEqual(src *int32) bool {

	if p.NextOffset == src {
		return true
	} else if p.NextOffset == nil || src == nil {
		return false
	}
	if *p.NextOffset != *src {
		return false
	}
	return true
}
func (p *TabInfo) Field5DeepEqual(src *int32) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}

type MainPageResp struct {
	TabInfos    []*TabInfo             `thrift:"tab_infos,1,optional" frugal:"1,optional,list<TabInfo>" json:"tab_infos,omitempty"`
	MainTabType *cell_base.MainTabType `thrift:"main_tab_type,2,optional" frugal:"2,optional,MainTabType" json:"main_tab_type,omitempty"`
	Extra       *base.Extra            `thrift:"extra,255,optional" frugal:"255,optional,base.Extra" json:"extra,omitempty"`
}

func NewMainPageResp() *MainPageResp {
	return &MainPageResp{}
}

func (p *MainPageResp) InitDefault() {
	*p = MainPageResp{}
}

var MainPageResp_TabInfos_DEFAULT []*TabInfo

func (p *MainPageResp) GetTabInfos() (v []*TabInfo) {
	if !p.IsSetTabInfos() {
		return MainPageResp_TabInfos_DEFAULT
	}
	return p.TabInfos
}

var MainPageResp_MainTabType_DEFAULT cell_base.MainTabType

func (p *MainPageResp) GetMainTabType() (v cell_base.MainTabType) {
	if !p.IsSetMainTabType() {
		return MainPageResp_MainTabType_DEFAULT
	}
	return *p.MainTabType
}

var MainPageResp_Extra_DEFAULT *base.Extra

func (p *MainPageResp) GetExtra() (v *base.Extra) {
	if !p.IsSetExtra() {
		return MainPageResp_Extra_DEFAULT
	}
	return p.Extra
}
func (p *MainPageResp) SetTabInfos(val []*TabInfo) {
	p.TabInfos = val
}
func (p *MainPageResp) SetMainTabType(val *cell_base.MainTabType) {
	p.MainTabType = val
}
func (p *MainPageResp) SetExtra(val *base.Extra) {
	p.Extra = val
}

var fieldIDToName_MainPageResp = map[int16]string{
	1:   "tab_infos",
	2:   "main_tab_type",
	255: "extra",
}

func (p *MainPageResp) IsSetTabInfos() bool {
	return p.TabInfos != nil
}

func (p *MainPageResp) IsSetMainTabType() bool {
	return p.MainTabType != nil
}

func (p *MainPageResp) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *MainPageResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MainPageResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MainPageResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.TabInfos = make([]*TabInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTabInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.TabInfos = append(p.TabInfos, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MainPageResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := cell_base.MainTabType(v)
		p.MainTabType = &tmp
	}
	return nil
}

func (p *MainPageResp) ReadField255(iprot thrift.TProtocol) error {
	p.Extra = base.NewExtra()
	if err := p.Extra.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MainPageResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MainPageResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MainPageResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabInfos() {
		if err = oprot.WriteFieldBegin("tab_infos", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TabInfos)); err != nil {
			return err
		}
		for _, v := range p.TabInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MainPageResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMainTabType() {
		if err = oprot.WriteFieldBegin("main_tab_type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MainTabType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MainPageResp) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Extra.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *MainPageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MainPageResp(%+v)", *p)
}

func (p *MainPageResp) DeepEqual(ano *MainPageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabInfos) {
		return false
	}
	if !p.Field2DeepEqual(ano.MainTabType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Extra) {
		return false
	}
	return true
}

func (p *MainPageResp) Field1DeepEqual(src []*TabInfo) bool {

	if len(p.TabInfos) != len(src) {
		return false
	}
	for i, v := range p.TabInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *MainPageResp) Field2DeepEqual(src *cell_base.MainTabType) bool {

	if p.MainTabType == src {
		return true
	} else if p.MainTabType == nil || src == nil {
		return false
	}
	if *p.MainTabType != *src {
		return false
	}
	return true
}
func (p *MainPageResp) Field255DeepEqual(src *base.Extra) bool {

	if !p.Extra.DeepEqual(src) {
		return false
	}
	return true
}

type MainstoreService interface {
	ItemDetail(ctx context.Context, req *ItemDetailReq) (r *ItemDetailResp, err error)

	MainPage(ctx context.Context, req *MainPageReq) (r *MainPageResp, err error)
}

type MainstoreServiceClient struct {
	c thrift.TClient
}

func NewMainstoreServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MainstoreServiceClient {
	return &MainstoreServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMainstoreServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MainstoreServiceClient {
	return &MainstoreServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMainstoreServiceClient(c thrift.TClient) *MainstoreServiceClient {
	return &MainstoreServiceClient{
		c: c,
	}
}

func (p *MainstoreServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MainstoreServiceClient) ItemDetail(ctx context.Context, req *ItemDetailReq) (r *ItemDetailResp, err error) {
	var _args MainstoreServiceItemDetailArgs
	_args.Req = req
	var _result MainstoreServiceItemDetailResult
	if err = p.Client_().Call(ctx, "ItemDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MainstoreServiceClient) MainPage(ctx context.Context, req *MainPageReq) (r *MainPageResp, err error) {
	var _args MainstoreServiceMainPageArgs
	_args.Req = req
	var _result MainstoreServiceMainPageResult
	if err = p.Client_().Call(ctx, "MainPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MainstoreServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MainstoreService
}

func (p *MainstoreServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MainstoreServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MainstoreServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMainstoreServiceProcessor(handler MainstoreService) *MainstoreServiceProcessor {
	self := &MainstoreServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ItemDetail", &mainstoreServiceProcessorItemDetail{handler: handler})
	self.AddToProcessorMap("MainPage", &mainstoreServiceProcessorMainPage{handler: handler})
	return self
}
func (p *MainstoreServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type mainstoreServiceProcessorItemDetail struct {
	handler MainstoreService
}

func (p *mainstoreServiceProcessorItemDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MainstoreServiceItemDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ItemDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MainstoreServiceItemDetailResult{}
	var retval *ItemDetailResp
	if retval, err2 = p.handler.ItemDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ItemDetail: "+err2.Error())
		oprot.WriteMessageBegin("ItemDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ItemDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mainstoreServiceProcessorMainPage struct {
	handler MainstoreService
}

func (p *mainstoreServiceProcessorMainPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MainstoreServiceMainPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("MainPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MainstoreServiceMainPageResult{}
	var retval *MainPageResp
	if retval, err2 = p.handler.MainPage(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MainPage: "+err2.Error())
		oprot.WriteMessageBegin("MainPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("MainPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MainstoreServiceItemDetailArgs struct {
	Req *ItemDetailReq `thrift:"req,1" frugal:"1,default,ItemDetailReq" json:"req"`
}

func NewMainstoreServiceItemDetailArgs() *MainstoreServiceItemDetailArgs {
	return &MainstoreServiceItemDetailArgs{}
}

func (p *MainstoreServiceItemDetailArgs) InitDefault() {
	*p = MainstoreServiceItemDetailArgs{}
}

var MainstoreServiceItemDetailArgs_Req_DEFAULT *ItemDetailReq

func (p *MainstoreServiceItemDetailArgs) GetReq() (v *ItemDetailReq) {
	if !p.IsSetReq() {
		return MainstoreServiceItemDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MainstoreServiceItemDetailArgs) SetReq(val *ItemDetailReq) {
	p.Req = val
}

var fieldIDToName_MainstoreServiceItemDetailArgs = map[int16]string{
	1: "req",
}

func (p *MainstoreServiceItemDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MainstoreServiceItemDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MainstoreServiceItemDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MainstoreServiceItemDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewItemDetailReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MainstoreServiceItemDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MainstoreServiceItemDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MainstoreServiceItemDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MainstoreServiceItemDetailArgs(%+v)", *p)
}

func (p *MainstoreServiceItemDetailArgs) DeepEqual(ano *MainstoreServiceItemDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MainstoreServiceItemDetailArgs) Field1DeepEqual(src *ItemDetailReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MainstoreServiceItemDetailResult struct {
	Success *ItemDetailResp `thrift:"success,0,optional" frugal:"0,optional,ItemDetailResp" json:"success,omitempty"`
}

func NewMainstoreServiceItemDetailResult() *MainstoreServiceItemDetailResult {
	return &MainstoreServiceItemDetailResult{}
}

func (p *MainstoreServiceItemDetailResult) InitDefault() {
	*p = MainstoreServiceItemDetailResult{}
}

var MainstoreServiceItemDetailResult_Success_DEFAULT *ItemDetailResp

func (p *MainstoreServiceItemDetailResult) GetSuccess() (v *ItemDetailResp) {
	if !p.IsSetSuccess() {
		return MainstoreServiceItemDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MainstoreServiceItemDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*ItemDetailResp)
}

var fieldIDToName_MainstoreServiceItemDetailResult = map[int16]string{
	0: "success",
}

func (p *MainstoreServiceItemDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MainstoreServiceItemDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MainstoreServiceItemDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MainstoreServiceItemDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewItemDetailResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MainstoreServiceItemDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MainstoreServiceItemDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MainstoreServiceItemDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MainstoreServiceItemDetailResult(%+v)", *p)
}

func (p *MainstoreServiceItemDetailResult) DeepEqual(ano *MainstoreServiceItemDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MainstoreServiceItemDetailResult) Field0DeepEqual(src *ItemDetailResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MainstoreServiceMainPageArgs struct {
	Req *MainPageReq `thrift:"req,1" frugal:"1,default,MainPageReq" json:"req"`
}

func NewMainstoreServiceMainPageArgs() *MainstoreServiceMainPageArgs {
	return &MainstoreServiceMainPageArgs{}
}

func (p *MainstoreServiceMainPageArgs) InitDefault() {
	*p = MainstoreServiceMainPageArgs{}
}

var MainstoreServiceMainPageArgs_Req_DEFAULT *MainPageReq

func (p *MainstoreServiceMainPageArgs) GetReq() (v *MainPageReq) {
	if !p.IsSetReq() {
		return MainstoreServiceMainPageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MainstoreServiceMainPageArgs) SetReq(val *MainPageReq) {
	p.Req = val
}

var fieldIDToName_MainstoreServiceMainPageArgs = map[int16]string{
	1: "req",
}

func (p *MainstoreServiceMainPageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MainstoreServiceMainPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MainstoreServiceMainPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MainstoreServiceMainPageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMainPageReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MainstoreServiceMainPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MainPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MainstoreServiceMainPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MainstoreServiceMainPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MainstoreServiceMainPageArgs(%+v)", *p)
}

func (p *MainstoreServiceMainPageArgs) DeepEqual(ano *MainstoreServiceMainPageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MainstoreServiceMainPageArgs) Field1DeepEqual(src *MainPageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MainstoreServiceMainPageResult struct {
	Success *MainPageResp `thrift:"success,0,optional" frugal:"0,optional,MainPageResp" json:"success,omitempty"`
}

func NewMainstoreServiceMainPageResult() *MainstoreServiceMainPageResult {
	return &MainstoreServiceMainPageResult{}
}

func (p *MainstoreServiceMainPageResult) InitDefault() {
	*p = MainstoreServiceMainPageResult{}
}

var MainstoreServiceMainPageResult_Success_DEFAULT *MainPageResp

func (p *MainstoreServiceMainPageResult) GetSuccess() (v *MainPageResp) {
	if !p.IsSetSuccess() {
		return MainstoreServiceMainPageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MainstoreServiceMainPageResult) SetSuccess(x interface{}) {
	p.Success = x.(*MainPageResp)
}

var fieldIDToName_MainstoreServiceMainPageResult = map[int16]string{
	0: "success",
}

func (p *MainstoreServiceMainPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MainstoreServiceMainPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MainstoreServiceMainPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MainstoreServiceMainPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMainPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MainstoreServiceMainPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MainPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MainstoreServiceMainPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MainstoreServiceMainPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MainstoreServiceMainPageResult(%+v)", *p)
}

func (p *MainstoreServiceMainPageResult) DeepEqual(ano *MainstoreServiceMainPageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MainstoreServiceMainPageResult) Field0DeepEqual(src *MainPageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
