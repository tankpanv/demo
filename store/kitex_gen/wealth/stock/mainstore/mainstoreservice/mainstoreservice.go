// Code generated by Kitex v0.6.1. DO NOT EDIT.

package mainstoreservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	mainstore "github.com/tankpanv/demo/store/kitex_gen/wealth/stock/mainstore"
)

func serviceInfo() *kitex.ServiceInfo {
	return mainstoreServiceServiceInfo
}

var mainstoreServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MainstoreService"
	handlerType := (*mainstore.MainstoreService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ItemDetail": kitex.NewMethodInfo(itemDetailHandler, newMainstoreServiceItemDetailArgs, newMainstoreServiceItemDetailResult, false),
		"MainPage":   kitex.NewMethodInfo(mainPageHandler, newMainstoreServiceMainPageArgs, newMainstoreServiceMainPageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "mainstore",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func itemDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*mainstore.MainstoreServiceItemDetailArgs)
	realResult := result.(*mainstore.MainstoreServiceItemDetailResult)
	success, err := handler.(mainstore.MainstoreService).ItemDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMainstoreServiceItemDetailArgs() interface{} {
	return mainstore.NewMainstoreServiceItemDetailArgs()
}

func newMainstoreServiceItemDetailResult() interface{} {
	return mainstore.NewMainstoreServiceItemDetailResult()
}

func mainPageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*mainstore.MainstoreServiceMainPageArgs)
	realResult := result.(*mainstore.MainstoreServiceMainPageResult)
	success, err := handler.(mainstore.MainstoreService).MainPage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMainstoreServiceMainPageArgs() interface{} {
	return mainstore.NewMainstoreServiceMainPageArgs()
}

func newMainstoreServiceMainPageResult() interface{} {
	return mainstore.NewMainstoreServiceMainPageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ItemDetail(ctx context.Context, req *mainstore.ItemDetailReq) (r *mainstore.ItemDetailResp, err error) {
	var _args mainstore.MainstoreServiceItemDetailArgs
	_args.Req = req
	var _result mainstore.MainstoreServiceItemDetailResult
	if err = p.c.Call(ctx, "ItemDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MainPage(ctx context.Context, req *mainstore.MainPageReq) (r *mainstore.MainPageResp, err error) {
	var _args mainstore.MainstoreServiceMainPageArgs
	_args.Req = req
	var _result mainstore.MainstoreServiceMainPageResult
	if err = p.c.Call(ctx, "MainPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
